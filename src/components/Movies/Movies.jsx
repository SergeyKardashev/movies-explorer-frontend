import React, {
  useState, useRef, useEffect,
} from 'react';
import './Movies.css';
import Preloader from '../Preloader/Preloader';
import MoviesCardList from '../MoviesCardList/MoviesCardList';
import SearchForm from '../SearchForm/SearchForm';
import FilterCheckbox from '../FilterCheckbox/FilterCheckbox';
import getAllMoviesFromApi from '../../utils/BeatFilmApi';
import LS_KEYS from '../../constants/localStorageKeys';
import ERR_MSG from '../../constants/errorMessages';
import processMovies from '../../utils/processMovies';
import getAllMoviesFromLs from '../../utils/getAllMoviesFromLs';
import useStorage from '../../utils/hooks';
import MoreBtn from '../MoreBtn/MoreBtn';
import compareStr from '../../utils/compareStr';

//  1280px+ = 16—à—Ç. –ö–Ω–æ–ø–∫–∞ = –¥–æ–ø 4—à—Ç.
//  768-1280 = 8—à—Ç. –ö–Ω–æ–ø–∫–∞ = –¥–æ–ø 2—à—Ç.
//  320-768 ‚Äî 5—à—Ç. –ö–Ω–æ–ø–∫–∞ = –¥–æ–ø 2—à—Ç.
const initialCardsAmount = { desktop: 16, tablet: 8, phone: 5 };
const extraCardsNumber = { desktop: 4, tablet: 2, phone: 2 };

// return –≤ –∫–∞–∂–¥–æ–º —É—Å–ª–æ–≤–∏–∏ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
const getDeviceType = (clientWidth) => {
  if (clientWidth >= 1280) {
    return 'desktop';
  }
  if ((clientWidth >= 768) && (clientWidth < 1280)) {
    return 'tablet';
  }
  return 'phone';
};

function Movies() {
  const [deviceType, setDeviceType] = useState(
    () => getDeviceType(document.documentElement.clientWidth),
  );
  const searchFieldRef = useRef(null);
  const [filteredMovies, setFilteredMovies] = useStorage('filteredMovies', []);
  const [isFetching, setFetching] = useState(false);
  const [isShort, setShort] = useStorage('isShort', JSON.parse(localStorage.getItem(LS_KEYS.isShort) || 'false'));
  const [fetchErrMsg, setFetchErrMsg] = useState('');
  const [isMoreBtnVisible, setMoreBtnVisible] = useState(false);

  async function getAllMovies() {
    // –ë–µ—Ä–µ—Ç —Ñ–∏–ª—å–º—ã –ª–∏–±–æ –∏–∑ –õ–°, –ª–∏–±–æ –∏–∑ –±—ç–∫–∞
    setFetching(true);
    const allMoviesFromLS = getAllMoviesFromLs();
    if (allMoviesFromLS.length !== 0) {
      setFetching(false);
      return allMoviesFromLS;
    }

    let processedMovies;
    try {
      const allMoviesFromApi = await getAllMoviesFromApi();
      // üç∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –º–∞—Å—Å–∏–≤, –ø—Ä–∏–≤–æ–¥—è –∫ –≤–∏–¥—É –±—ç–∫–∞
      processedMovies = processMovies(allMoviesFromApi);
      localStorage.setItem(LS_KEYS.allMovies, JSON.stringify(processedMovies));
    } catch (error) {
      setFetchErrMsg(error);
    }
    setFetching(false);
    return processedMovies;
  }

  // –§–∏–ª—å—Ç—Ä—É—é –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º –∑–∞–ø—Ä–æ—Å—É
  function filterMovies(movies, isMovieShort, queryValue) {
    return movies.filter((movie) => {
      const isNameMatch = compareStr(queryValue, movie.nameRU)
        || compareStr(queryValue, movie.nameEN);
      // –ï—Å–ª–∏ —á–µ–∫–±–æ–∫—Å –∞–∫—Ç–∏–≤–µ–Ω, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—é –¥–ª–∏—Ç-—Ç—å. –í–æ–∑–≤—Ä–∞—â–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç –î–í–£–• –ø—Ä–æ–≤–µ—Ä–æ–∫:
      // 1) —Å–ª–∏—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏ 2) —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
      // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏, –Ω–µ –∏—Å–ø–æ–ª–Ω—è—è —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç—Ä–æ–∫–∏.
      if (isMovieShort) {
        return isNameMatch && movie.duration <= 40;
      }
      return isNameMatch; // –ß–ë –ù–ï–∞–∫—Ç–∏–≤: –≤–æ–∑–≤—Ä–∞—Ç –¢–û–õ–¨–ö–û —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ name check –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª–∏—Ç-—Ç–∏
    });
  }

  const getNextMovies = (movies, startIndex, limit) => {
    // –ø—Ä–æ–≤–µ—Ä—è—é —Ä–∞–∑–º–µ—Ä –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –º–∞—Å—Å–∏–≤–∞ (—Å–ª–µ–¥—É—é—â–∏–π –∏–Ω–¥–µ–∫—Å –µ—Å—Ç—å –ª–∏)
    // –∏ –≤—ã—Å—Ç–∞–≤–ª—è—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–µ–π—Ç–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫–Ω–æ–ø–∫–∏ –ï–©–ï

    // –ú–∞—Å—Å–∏–≤, –∫–æ—Ç–æ—Ä—ã–π –≤–µ—Ä–Ω—É (–∏ –æ—Ç–æ–±—Ä–∞–∂—É)
    const arrayToReturn = movies.slice(startIndex, startIndex + limit);

    // –°–∫–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ–¥–∞–Ω–æ –Ω–∞ –≤—Ö–æ–¥:
    const submittedArrLength = movies.length;

    // –°–∫–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤–µ—Ä–Ω—É –Ω–∞ –ø–æ–∫–∞–∑:
    const returnedArrLength = arrayToReturn.length;

    // –°–∫–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ
    const numberOfRemainedItems = submittedArrLength - (startIndex + returnedArrLength);

    if (numberOfRemainedItems > 0) {
      // console.log('–æ—Å—Ç–∞–ª–æ—Å—å —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–∫–∞–∑–∞–Ω–Ω–æ–µ, —Å—Ç–∞–≤–ª—é –∫–Ω–æ–ø–∫—É');
      setMoreBtnVisible(true);
    } else {
      // console.log('–Ω–µ–ø–æ–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –Ω–µ—Ç, –ø—Ä—è—á—É –∫–Ω–æ–ø–∫—É');
      setMoreBtnVisible(false);
    }

    return arrayToReturn;
  };

  // todo - –ø–æ—Ä—è–¥–æ–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
  const searchMoviesAll = async (previousMovies, queryValue, isMovieShort) => {
    if (!queryValue) {
      return;
    }
    try {
      localStorage.setItem(LS_KEYS.queryAll, queryValue);
      // –∏–¥—É –∑–∞ –°–æ—Ç–∫–æ–π –≤ –õ–° –∏–ª–∏ –ê–ü–ò. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å—Ç—Ä–æ–µ–Ω–∞ –≤ getAllMovies
      const allMovies = await getAllMovies();
      // –§–∏–ª—å—Ç—Ä—É—é –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º –∑–∞–ø—Ä–æ—Å—É
      const filtered = filterMovies(allMovies, isMovieShort, queryValue);

      // —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å –≤—ã—Å—Ç–∞–≤–ª—è—é —Ä–∞–≤–Ω—ã–º –¥–ª–∏–Ω–µ –º–∞—Å—Å–∏–≤–∞, —Å–∫–æ—Ä–º–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫—É.
      // –†–∞–∑–º–µ—Ä –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–æ–≥–æ, –∫—Ç–æ –∑–∞–ø—É—Å—Ç–∏–ª –∏—â–µ–π–∫—É.
      // –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞ –∏–ª–∏ —á–µ–∫–±–æ–∫—Å, —Ç–æ –º–∞—Å—Å–∏–≤ –ø—É—Å—Ç.
      // –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ï–©–ï, —Ç–æ –º–∞—Å—Å–∏–≤ - —Ç–æ —á—Ç–æ —É–∂–µ –Ω–∞ —ç–∫—Ä–∞–Ω–µ.
      const startIndex = previousMovies.length;

      // —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Ä–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ - –ø–æ –∫–Ω–æ–ø–∫–µ –ï–©–ï
      const limit = startIndex === 0
        ? initialCardsAmount[deviceType]
        : extraCardsNumber[deviceType];

      const nextMovies = getNextMovies(filtered, startIndex, limit);

      setFilteredMovies([...previousMovies, ...nextMovies]);
    } catch (error) {
      console.error('Error occurred while searching for movies: ', error);
    }
  };

  const handleSubmit = async (e) => {
    // todo - –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É '–Ω–∞–π—Ç–∏' –ø–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞ –¥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª—è
    const queryValue = searchFieldRef.current.value.trim();
    e.preventDefault();
    setFilteredMovies([]);
    await searchMoviesAll([], queryValue, isShort);
  };

  const handleIsShort = async () => {
    const queryValue = searchFieldRef.current.value.trim();
    const nextIsShort = !isShort;
    setShort(nextIsShort);
    setFilteredMovies([]);
    await searchMoviesAll([], queryValue, nextIsShort);
  };

  const handleShowMore = async (e) => {
    const queryValue = searchFieldRef.current.value.trim();
    e.preventDefault();
    await searchMoviesAll(filteredMovies, queryValue, isShort);
  };

  useEffect(() => {
    // –ü—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ / –ú–û–ù–¢–ò–†–û–í–ê–ù–ò–ò : –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–µ–π—Ç–æ–≤ –∫–æ—Ä–æ—Ç–∫–æ–º–µ—Ç—Ä–∞–∂–µ–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑ –õ–°
    const initialIsShort = JSON.parse(localStorage.getItem(LS_KEYS.isShort) || 'false');
    setShort(initialIsShort);

    const filteredMoviesFromLS = JSON.parse(localStorage.getItem(LS_KEYS.filtered));
    if (filteredMoviesFromLS) {
      setFilteredMovies(filteredMoviesFromLS);
    }

    // –ü—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ / –ú–û–ù–¢–ò–†–û–í–ê–ù–ò–ò —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –±—ã–ª–∞ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞ –µ—Å–ª–∏ –Ω–∞–¥–æ:
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–∑ –õ–°
    const savedQuery = localStorage.getItem(LS_KEYS.queryAll);
    // –ø—Ä–æ–≤–µ—Ä—è—é —á—Ç–æ –æ–Ω –Ω–µ –ø—É—Å—Ç
    if (savedQuery) {
      searchFieldRef.current.value = savedQuery;
      // –í—ã–ø–æ–ª–Ω—è—é –ø–æ–∏—Å–∫ —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
      handleSubmit({ preventDefault: () => { } });
      // { preventDefault: () => { } } —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –∏–∑ - –∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –æ–±—ä–µ–∫—Ç–∞ —Å–æ–±—ã—Ç–∏—è
      // —Ç.–∫.–≤—ã–∑—ã–≤–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º—ã –Ω–∞–ø—Ä—è–º—É—é –±–µ–∑ —Å–æ–±—ã—Ç–∏—è
    }

    let resizeTimer;

    function handleWindowResize() {
      clearTimeout(resizeTimer); // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–∞–π–º–µ—Ä–∞

      resizeTimer = setTimeout(() => {
        setDeviceType(getDeviceType(document.documentElement.clientWidth));
      }, 1000);
    }
    window.addEventListener('resize', handleWindowResize);

    return () => {
      clearTimeout(resizeTimer); // –û—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
      window.removeEventListener('resize', handleWindowResize);
    };
  }, []);

  return (
    <main className="movies">
      <SearchForm
        onSubmit={handleSubmit}
        searchFieldRef={searchFieldRef}
        query={LS_KEYS.queryAll}
      />
      <FilterCheckbox onChange={handleIsShort} isShort={isShort} />
      <div className="movies__search-results">
        {isFetching ? <Preloader /> : ''}
        {!isFetching && (filteredMovies.length > 0)
          && (<MoviesCardList filteredMovies={filteredMovies} />)}
        {/* –ï—Å–ª–∏ –ù–ï–∏–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ –∏ –º–∞—Å—Å–∏–≤ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç, —Ç–æ –≤–º–µ—Å—Ç–æ —Å–ø–∏—Å–∫–∞ –¥–∞—é –æ—à–∏–±–∫—É: */}
        {/*  - –ø—Ä–∏ –ø—É—Å—Ç–æ–º –º–∞—Å—Å–∏–≤–µ = ERR_MSG.noResultsInAllMovies
             - –ø—Ä–∏ –æ—à–∏–±–∫–µ —Ñ–µ—Ç—á–∞ –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö = fetchAllMoviesErr */}
        {!isFetching && (filteredMovies.length === 0) && (fetchErrMsg === '') && (<h2>{ERR_MSG.noResultsInAllMovies}</h2>)}
        {!isFetching && (fetchErrMsg !== '') && (<h2>{ERR_MSG.fetchAllMoviesErr}</h2>)}
        {isMoreBtnVisible ? (<MoreBtn onShowMore={handleShowMore} />) : ''}

      </div>
    </main>
  );
}

export default Movies;
