import React, { useState, useContext, useEffect } from 'react';
import { Link } from 'react-router-dom';
import './Register.css';
import logoPath from '../../images/logo.svg';
import handleUserFormChange from '../../utils/handleUserFormChange';
import CurrentUserContext from '../../contexts/CurrentUserContext';

function Register(props) {
  const {
    onSubmit,
    apiError,
    onResetApiError,
  } = props;

  // // // // //
  //  –°–¢–ï–ô–¢–´  //
  // // // // //

  const currentUserState = useContext(CurrentUserContext);
  const [currentUser, setCurrentUser] = currentUserState;
  const [errors, setErrors] = useState({ userName: '', userEmail: '', userPassword: '' });

  const [isEditMode, setIsEditMode] = useState(true);// —Å—Ç–µ–π—Ç –¥–ª—è –±–ª–æ–∫–∞ —Ñ–æ—Ä–º –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–∞—Ö –∫ –ê–ü–ò

  // üü¢ –∑–∞–º–µ–Ω–∏–ª —Å—Ç–µ–π—Ç –Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é. –ù–µ –±—É–¥–µ—Ç —Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç.
  const isFormValid = (errors.userName === '')
    && (errors.userEmail === '')
    && (errors.userPassword === '')
    && (currentUser.userName)
    && (currentUser.userEmail)
    && (currentUser.userPassword);

  // // // // // //
  //    —Å—Ç–∏–ª–∏    //
  // // // // // //

  const registerBtnClassName = `register__button ${(!isFormValid || !isEditMode)
    ? ' register__button_disabled'
    : ''}`;

  // // // // // //
  //   –§–£–ù–ö–¶–ò–ò   //
  // // // // // //

  const handleChange = (event) => {
    handleUserFormChange(event, currentUser, setCurrentUser, errors, setErrors);
  };

  const handleSubmit = async (event) => {
    event.preventDefault();
    setIsEditMode(false); // –ë–ª–æ–∫–∏—Ä—É—é —Ñ–æ—Ä–º—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –¥–∞–Ω–Ω—ã—Ö
    try {
      await onSubmit(); // –û–∂–∏–¥–∞—é –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã: ', error);
    } finally {
      setIsEditMode(true); // –†–∞–∑–±–ª–æ–∫–∏—Ä—É—é —Ñ–æ—Ä–º—É –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    }
  };

  // // // // // //
  //   –≠–§–§–ï–ö–¢–´   //
  // // // // // //

  useEffect(() => {
    onResetApiError(); // —ç—Ñ—Ñ–µ–∫—Ç –æ—á–∏—Å—Ç–∫–∏ –æ—à–∏–±–∫–∏ –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    return () => {
      onResetApiError(); // –≠—Ç–æ—Ç –∫–æ–¥ –æ—á–∏—Å—Ç–∫–∏ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –ø—Ä–∏ –†–ê–ó–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    };
  }, []);

  return (
    <main className="register">

      <section className="register__top">
        <a href="/"><img className="register__logo" src={logoPath} alt="–ª–æ–≥–æ" /></a>
        <h1 className="register__heading">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</h1>
      </section>

      <form className="register__form" onSubmit={handleSubmit} noValidate>
        <span className="register__input-label">–ò–º—è</span>
        <input
          value={currentUser.userName || ''}
          className="register__input register__input-name"
          onChange={handleChange}
          id="name-input"
          name="userName"
          type="text"
          placeholder="–ò–º—è"
          readOnly={!isEditMode}
        />
        <span className="register__input-error register__input-error_userName">
          {errors.userName}
        </span>

        <span className="register__input-label">E-mail</span>
        <input
          value={currentUser.userEmail || ''}
          className="register__input register__input-email"
          onChange={handleChange}
          id="email-input"
          name="userEmail"
          type="text"
          placeholder="E-mail"
          readOnly={!isEditMode}
        />
        <span className="register__input-error register__input-error_email">
          {errors.userEmail}
        </span>

        <span className="register__input-label">–ü–∞—Ä–æ–ª—å</span>
        <input
          className="register__input register__input-password"
          value={currentUser.userPassword || ''}
          onChange={handleChange}
          id="password-input"
          name="userPassword"
          type="password"
          placeholder="–ü–∞—Ä–æ–ª—å"
          readOnly={!isEditMode}
        />
        <span className="register__input-error register__input-error_password">
          {errors.userPassword}
        </span>

        <div className="register__buttons-group">
          <span className="register__submit-error">{apiError}</span>
          <button
            disabled={(!isFormValid || !isEditMode)}
            className={registerBtnClassName}
            type="submit"
          >
            –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
          </button>
          <p className="register__secondary-action-txt">
            –£–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã?
            <Link to="/signin" className="register__secondary-action-link">–í–æ–π—Ç–∏</Link>
          </p>
        </div>

      </form>
    </main>
  );
}

export default Register;
