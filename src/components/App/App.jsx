import React, { useEffect, useState } from 'react';
import { Route, Routes, useNavigate } from 'react-router-dom';
import './App.css';
import Main from '../Main/Main';
import Login from '../Login/Login';
import Register from '../Register/Register';
import Profile from '../Profile/Profile';
import Header from '../Header/Header';
import MenuPopup from '../MenuPopup/MenuPopup';
import NotFound from '../NotFound/NotFound';
import Footer from '../Footer/Footer';
import Movies from '../Movies/Movies';
import SavedMovies from '../SavedMovies/SavedMovies';
import {
  createUserApi, updateUserApi, loginApi, getUserApi, getMoviesApi,
} from '../../utils/MainApi';
import { useLocalStorageState as useStorage } from '../../utils/hooks';
import LS_KEYS from '../../constants/localStorageKeys';
import { setToken } from '../../utils/token'; // getToken, // removeToken,
import CurrentUserContext from '../../contexts/CurrentUserContext';

function App() {
  const navigate = useNavigate();
  const [isMenuPopupOpen, setIsMenuPopupOpen] = useState(false);
  // —Å—Ç–µ–π—Ç—ã —á–µ—Ä–µ–∑ –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Ö—É–∫–∏:
  const [isLoggedIn, setIsLoggedIn] = useStorage('isLoggedIn', false);
  const [currentUser, setCurrentUser] = useStorage('user', {});

  const urlWithHeader = ['/', '/movies', '/saved-movies', '/profile'];
  const urlWithFooter = ['/', '/movies', '/saved-movies'];

  const cbCloseMenuPopup = () => { setIsMenuPopupOpen(false); };

  useEffect(() => { setIsLoggedIn(JSON.parse(localStorage.getItem('isLoggedIn'))); }, []);

  const cbLogin = async (loginData) => {
    try {
      await loginApi(loginData)
        .then((data) => {
          setToken(data.token);
        })
        .then(() => {
          getMoviesApi()
            .then((res) => {
              localStorage.setItem(LS_KEYS.likedMovies, JSON.stringify(res));
            })
            .catch(console.error);
        })
        .then(() => {
          getUserApi()
            .then((res) => {
              setCurrentUser(res);
              setIsLoggedIn(true);
              navigate('/movies', { replace: false });
            })
            .catch(console.error);
        });
    } catch (err) {
      console.error(err);
    }
  };

  const cbRegister = async (e) => {
    e.preventDefault();
    try {
      // —Å–æ—Ö—Ä–∞–Ω—è—é —Å–≤–æ–π—Å—Ç–≤–∞ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å—Ç–µ–π—Ç–∞, —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Å –∏–Ω–ø—É—Ç–∞–º–∏ –≤ –≤–∏–¥–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
      const { userEmail, userName, userPassword } = currentUser;
      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é —é–∑–µ—Ä–∞, –ø–æ–ª—É—á–∞—é –∞–π–¥–∏—à–Ω–∏–∫
      const registeredData = await createUserApi({ userEmail, userName, userPassword });
      const { _id } = registeredData;
      // –≤—Ö–æ–∂—É, –≤ —Ñ—É–Ω–∫—Ü–∏–∏ login –∑–∞–ø–∏—Å—ã–≤–∞—è —Ç–æ–∫–µ–Ω –≤ –õC
      cbLogin({ userEmail, userPassword });
      // loginApi({ userEmail, userPassword });
      setCurrentUser({ userEmail, userName, userId: _id });
      setIsLoggedIn(true);
      /* üî¥ —Ç.–µ. setIsLoggedIn –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π: —á—Ç–æ–±—ã –Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –£–ñ–ï –≤–æ—à–µ–¥—à–µ–≥–æ,–∞ –Ω–µ –≤—Ö–æ–¥—è—â–µ–≥–æ,
      –º–æ–∂–Ω–æ –≤ —é–∑—ç—Ñ–µ–∫—Ç–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Å—Ç–µ–π—Ç–æ–º isLoggedIn –∏ –≤—ã–∑—ã–≤–∞—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é */
      navigate('/movies', { replace: false });
    } catch (err) {
      console.log(err); // üî¥ –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ù–ï –æ–∫ - –æ—à–∏–±–∫–∞ –Ω–∞–¥ –∫–Ω–æ–ø–∫–æ–π.
    }
  };

  const cbMenuClick = () => { setIsMenuPopupOpen(true); };

  const cbLogOut = () => {
    setIsLoggedIn(false);
    localStorage.clear();
    setCurrentUser({ userName: '', userEmail: '', userPassword: '' });
    navigate('/', { replace: false });
  };

  const cbUpdateUser = async (userData) => {
    // —à–ª—é –ø—Ä–∞–≤–∫–∏ —é–∑–µ—Ä–∞ –≤ –ê–ü–ò. –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –û–ö - –æ–±–Ω–æ–≤–ª—è—é —é–∑–µ—Ä–∞ —Ö—É–∫–æ–º (—Å—Ç–µ–π—Ç –∏ –õ–°) –∏ –Ω–∞ –≥–ª–∞–≤–Ω—É—é.
    try {
      const response = await updateUserApi(userData);
      const userToSetState = {
        userEmail: response.email,
        userName: response.name,
        userId: currentUser._id,
      };
      setCurrentUser(userToSetState);
      navigate('/', { replace: true });
    } catch (error) {
      console.log(error); // üî¥ –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ù–ï –æ–∫, –ù–ï –∏–¥—É –Ω–∞ –≥–ª–∞–≤–Ω—É—é, –æ—à–∏–±–∫–∞ –Ω–∞–¥ –∫–Ω–æ–ø–∫–æ–π.
    }
  };

  return (
    <CurrentUserContext.Provider value={currentUser}>
      <Header
        urlWithHeader={urlWithHeader}
        isLoggedIn={isLoggedIn}
        onMenuClick={cbMenuClick}
      />

      <Routes>
        <Route path="/" element={<Main />} />
        <Route path="/movies" element={<Movies />} />
        <Route path="/saved-movies" element={<SavedMovies />} />
        <Route
          path="/signin"
          element={<Login onSubmit={cbLogin} />}
        />
        <Route
          path="/signup"
          element={(
            <Register setCurrentUser={setCurrentUser} onSubmit={cbRegister} />
          )}
        />
        <Route
          path="/profile"
          element={(
            <Profile onSubmit={cbUpdateUser} onLogOut={cbLogOut} />
          )}
        />
        <Route path="/*" element={<NotFound />} />
      </Routes>

      <Footer urlWithFooter={urlWithFooter} />

      <MenuPopup onClose={cbCloseMenuPopup} isMenuPopupOpen={isMenuPopupOpen} />
    </CurrentUserContext.Provider>
  );
}

export default App;
