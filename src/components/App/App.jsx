import React, { useEffect, useState } from 'react';
import { Route, Routes, useNavigate } from 'react-router-dom';
import './App.css';
import Main from '../Main/Main';
import Login from '../Login/Login';
import Register from '../Register/Register';
import Profile from '../Profile/Profile';
import Header from '../Header/Header';
import MenuPopup from '../MenuPopup/MenuPopup';
import NotFound from '../NotFound/NotFound';
import Footer from '../Footer/Footer';
import Movies from '../Movies/Movies';
import SavedMovies from '../SavedMovies/SavedMovies';
import clearLocalStorage from '../utils/clearLocalStorage';
// import { createUser } from '../utils/MainApi';
import { createUser, updateUser } from '../utils/MainApi';
import { useLocalStorageState as useStorage } from '../utils/hooks';

function App() {
  const navigate = useNavigate();

  const [isLoggedIn, setIsLoggedIn] = useStorage('isLoggedIn', false);
  const [isMenuPopupOpen, setIsMenuPopupOpen] = useState(false);
  const [user, setUser] = useStorage('user', { userName: '', userEmail: '', userPassword: '' });

  const urlWithHeader = ['/', '/movies', '/saved-movies', '/profile'];
  const urlWithFooter = ['/', '/movies', '/saved-movies'];

  const cbCloseMenuPopup = () => { setIsMenuPopupOpen(false); };

  // –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤—ã—Å—Ç–∞–≤–ª—è—é —Å—Ç–µ–π—Ç –∑–Ω–∞—á–µ–Ω–∏–µ–º –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
  useEffect(
    () => { setIsLoggedIn(JSON.parse(localStorage.getItem('isLoggedIn'))); },
    [],
  );

  const cbRegister = async (e) => {
    e.preventDefault();
    const fetchedUser = await createUser(user);
    // üü¢ –∞–ø–∏ –¥–∞–µ—Ç —é–∑–µ—Ä–∞ —Å –ø–æ–ª—è–º–∏ name, email, _id, –∞ —Ñ—Ä–æ–Ω—Ç –∂–¥–µ—Ç userName, userEmail
    // üü¢ –ø–æ—ç—Ç–æ–º—É –Ω–µ–ª—å–∑—è –ø—Ä–æ—Å—Ç–æ –∑–∞–ø–∏—Å–∞—Ç—å –≤ —Å—Ç–µ–π—Ç —é–∑–µ—Ä–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é fetchedUser

    // üü¢ –ú–æ–∂–Ω–æ –ø–æ—à—Ç—É—á–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å –ø–æ–ª—è —Å—Ç–µ–π—Ç–∞
    // üü° –ø—Ä–∏ —Ç–∞–∫–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–µ–π—Ç–∞ –≤ –Ω–µ–º —Ö—Ä–∞–Ω–∏—Ç—Å—è –ø–∞—Ä–æ–ª—å. –ê –Ω–µ –¥–æ–ª–∂–µ–Ω.
    // üü° –ü–æ—Å–ª–µ —Å–∞–±–º–∏—Ç–∞ –Ω—É–∂–Ω–æ —É–¥–∞–ª—è—Ç—å –ø–∞—Ä–æ–ª—å –∏–∑ –æ–±—ä–µ–∫—Ç–∞ –∏–ª–∏ —Å–¥–µ–ª–∞—Ç—å undefined
    // user.userEmail = fetchedUser.email; // user.userName = fetchedUser.name;
    // user.userId = fetchedUser._id;
    // delete user.userPassword; // –∏–ª–∏ —Ç–∞–∫ user.userPassword = undefined;
    const userFromApi = {
      userEmail: fetchedUser.email,
      userName: fetchedUser.name,
      userId: fetchedUser._id,
    };
    // üü° setUser —Å–¥–µ–ª–∞–Ω –∫–∞—Å—Ç–æ–º–Ω—ã–º —Ö—É–∫–æ–º –∏ –ø–∏—à–µ—Ç –≤ —Å—Ç–µ–π—Ç+–õ–°. –°–ª–µ–¥—É—é—â–∏–µ 2 —Å—Ç—Ä–æ–∫–∏ –Ω–µ –Ω—É–∂–Ω—ã
    // localStorage.setItem('user', JSON.stringify(fetchedUser));  // setUser(fetchedUser);

    setUser(userFromApi);
    setIsLoggedIn(true);
    navigate('/movies', { replace: false });
  };

  const cbLogin = (formData) => {
    let userFromLS = JSON.parse(localStorage.getItem('user'));
    if (!userFromLS) {
      userFromLS = formData;
    } else {
      userFromLS.userEmail = formData.userEmail;
      userFromLS.userPassword = formData.userPassword;
    }
    localStorage.setItem('user', JSON.stringify(userFromLS));
    setUser((state) => ({
      ...state,
      userEmail: formData.userEmail,
      userPassword: formData.userPassword,
    }));
    setIsLoggedIn(true);
    navigate('/movies', { replace: false });
  };

  const handleMenuClick = () => { setIsMenuPopupOpen(true); };

  const cbLogOut = () => {
    setIsLoggedIn(false);
    clearLocalStorage();
    setUser({ userName: '', userEmail: '', userPassword: '' });
    navigate('/', { replace: false });
  };

  // initialUser –æ—Ç–¥–∞—é –≤ –ø—Ä–æ–ø—Å—ã –ü–†–û–§–ò–õ–Ø —á—Ç–æ–±—ã –Ω–µ –ø—É—Ç–∞—Ç—å —Å–æ —Å—Ç–µ–π—Ç–æ–º —é–∑–µ—Ä–∞
  // –∏ —á—Ç–æ–± —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è cbUpdateUser –Ω–µ –º–µ–Ω—è–ª–∏—Å—å –ø—Ä–∏ —Ä–µ—Ä–µ–Ω–¥–µ—Ä–µ –æ—Ç –∏–Ω–ø—É—Ç–∞
  const initialUser = JSON.parse(localStorage.getItem('user') || '{}');

  const cbUpdateUser = async (userData) => {
    // –∑–∞–º–µ–Ω–∏–ª —á–∞—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏. –∏–≤–µ–Ω—Ç —É—à–µ–ª –≤ –¥–æ—á–∫—É. –ò–∑ –¥–æ—á–∫–∏ –≤–µ—Ä–Ω–µ—Ç—Å—è —é–∑–µ—Ä. –ï–≥–æ –æ—Ç–¥–∞–º –∞–ø–∏—à–∫–µ
    // const cbUpdateUser = async (e) => {
    // e.preventDefault();

    // –æ—Ç–ø—Ä–∞–≤–ª—è—é –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —é–∑–µ—Ä–∞ –≤ –ê–ü–ò
    try {
      const response = await updateUser(userData);
      console.log('response (user) is ', response);
      const userToSetState = {
        userEmail: response.email,
        userName: response.name,
        userId: user._id,
      };
      // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –û–ö - –æ–±–Ω–æ–≤–ª—è—é —Å—Ç–µ–π—Ç —é–∑–µ—Ä–∞ (–∞–≤—Ç–æ–º–∞—Ç–æ–º –∏ –õ–°), –∏–¥—É –Ω–∞ –≥–ª–∞–≤–Ω—É—é.
      setUser(userToSetState);
      navigate('/', { replace: true });
    } catch (error) {
      // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ù–ï –æ–∫ - –æ–±–Ω–æ–≤–ª—è—é –æ—à–∏–±–∫–∞ –Ω–∞–¥ –∫–Ω–æ–ø–∫–æ–π, –≤–æ–∑–≤—Ä–∞—Ç –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏. –ù–ï –∏–¥—É –Ω–∞ –≥–ª–∞–≤–Ω—É—é
      // üî¥ –≤—ã–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –Ω–∞–¥ –∫–Ω–æ–ø–∫–æ–π. –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∏ –æ—Ç–¥–∞—Ç—å –µ–µ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
      console.log(error);
    }
  };

  return (
    <>
      <Header
        urlWithHeader={urlWithHeader}
        isLoggedIn={isLoggedIn}
        onMenuClick={handleMenuClick}
      />

      <Routes>
        <Route path="/" element={<Main />} />
        <Route path="/movies" element={<Movies />} />
        <Route path="/saved-movies" element={<SavedMovies />} />
        <Route
          path="/signin"
          element={<Login onSubmit={cbLogin} />}
        />
        <Route
          path="/signup"
          element={(
            <Register
              user={user}
              setUser={setUser}
              onSubmit={cbRegister}
            />
          )}
        />
        <Route
          path="/profile"
          element={(
            <Profile
              onSubmit={cbUpdateUser}
              onLogOut={cbLogOut}
              // user={user}
              // setUser={setUser}
              initialUser={initialUser}
            />
          )}
        />
        <Route path="/*" element={<NotFound />} />
      </Routes>

      <Footer urlWithFooter={urlWithFooter} />

      <MenuPopup
        onClose={cbCloseMenuPopup}
        isMenuPopupOpen={isMenuPopupOpen}
      />
    </>
  );
}

export default App;
