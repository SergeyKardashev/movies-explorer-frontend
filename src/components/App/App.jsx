import React, { useEffect, useState, useCallback } from 'react';
import { Route, Routes, useNavigate } from 'react-router-dom';
import {
  createUserApi, getTokenApi, getUserApi, getMoviesApi,
} from '../../utils/MainApi';
import './App.css';
import Main from '../Main/Main';
import Login from '../Login/Login';
import Register from '../Register/Register';
import Profile from '../Profile/Profile';
import Header from '../Header/Header';
import MenuPopup from '../MenuPopup/MenuPopup';
import NotFound from '../NotFound/NotFound';
import Footer from '../Footer/Footer';
import Movies from '../Movies/Movies';
import SavedMovies from '../SavedMovies/SavedMovies';
import useStorage from '../../utils/hooks';
import LS_KEYS from '../../constants/localStorageKeys';
import { setToken } from '../../utils/token';
import CurrentUserContext from '../../contexts/CurrentUserContext';
import processUser from '../../utils/processUser';
import ProtectedRouteElement from '../ProtectedRoute/ProtectedRoute';
import LogOutFunctionContext from '../../contexts/LogOutFunctionContext';

function App() {
  const navigate = useNavigate();

  // // // // //
  //  –°–¢–ï–ô–¢–´  //
  // // // // //

  const [isMenuPopupOpen, setIsMenuPopupOpen] = useState(false); // –û—Ç–∫—Ä—ã—Ç–æ –ª–∏ –≥–∞–º–±—É—Ä–≥–µ—Ä-–º–µ–Ω—é
  const [apiError, setApiError] = useState(''); // –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –æ—Ç –∞–ø–∏ –Ω–∞–¥ –∫–Ω–æ–ø–∫–æ–π –≤ —Ñ–æ—Ä–º–∞—Ö —é–∑–µ—Ä–∞

  // –°—Ç–µ–π—Ç—ã —á–µ—Ä–µ–∑ –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ö—É–∫ useStorage, –¥—É–±–ª–∏—Ä—É—é—â–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Å—Ç–µ–π—Ç –∏ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ:
  const [isLoggedIn, setIsLoggedIn] = useStorage('isLoggedIn', false);

  // –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ —Å–¥–µ–ª–∞–ª –≤ 2 —Å—Ç—Ä–æ–∫–∏ (–¥–µ—Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞—Ü–∏—è –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–æ–π)
  // —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ, –∞ –Ω–µ –º–∞—Å—Å–∏–≤. –ò–Ω–∞—á–µ –ª–∏–Ω—Ç–µ—Ä —Ä—É–≥–∞–µ—Ç—Å—è.
  const currentUserState = useStorage('user', {});
  const [currentUser, setCurrentUser] = currentUserState;

  const urlWithHeader = ['/', '/movies', '/saved-movies', '/profile'];
  const urlWithFooter = ['/', '/movies', '/saved-movies'];

  // // // // // //
  //   –§–£–ù–ö–¶–ò–ò   //
  // // // // // //

  const cbCloseMenuPopup = () => {
    setIsMenuPopupOpen(false);
  };

  const resetApiError = () => {
    setApiError('');
  };

  const handleLogOut = useCallback(() => {
    setIsLoggedIn(false);
    setCurrentUser({});
    localStorage.clear();
    navigate('/', { replace: false });
  }, [navigate]);

  const getAndSaveToken = async (loginData) => {
    // –í—ã–ø–æ–ª–Ω—è—é –≤—Ö–æ–¥ –∏ –ø–æ–ª—É—á–∞—é —Ç–æ–∫–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è—é —Ç–æ–∫–µ–Ω –≤ –õ–° –∏ —Å—Ç–µ–π—Ç
    try {
      const loginResponse = await getTokenApi(loginData);
      setToken(loginResponse.token);
    } catch (error) {
      setApiError((error.message));
      throw error; // –ü—Ä–æ–±—Ä–æ—Å –æ—à–∏–±–∫–∏ –Ω–∞–≤–µ—Ä—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ handleLogin
    }
  };

  const getAndSetUser = async () => {
    // –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ —é–∑–µ—Ä–∞, –ø–∏—à—É –≤ –õ–° –∏ —Å—Ç–µ–π—Ç
    try {
      const rawUser = await getUserApi();
      setCurrentUser(processUser(rawUser));
    } catch (error) {
      setApiError((error.message));
      throw error; // –ü—Ä–æ–±—Ä–æ—Å –æ—à–∏–±–∫–∏ –Ω–∞–≤–µ—Ä—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ handleLogin
    }
  };

  const getAndSaveLikedMovies = async () => {
    // –ü–æ–ª—É—á–∞—é –ª–∞–π–∫–Ω—É—Ç—ã–µ —Ñ–∏–ª—å–º—ã –∏ –ø–∏—à—É –≤ –õ–°
    try {
      const movies = await getMoviesApi();
      localStorage.setItem(LS_KEYS.likedMovies, JSON.stringify(movies));
    } catch (error) {
      setApiError((error.message));
      throw error; // –ü—Ä–æ–±—Ä–æ—Å –æ—à–∏–±–∫–∏ –Ω–∞–≤–µ—Ä—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ handleLogin
    }
  };

  const handleLogin = async (loginData) => {
    try {
      await getAndSaveToken(loginData); // –ü–æ–ª—É—á–∞—é —Ç–æ–∫–µ–Ω
      await getAndSetUser(); // –ü–æ–ª—É—á–∞—é —é–∑–µ—Ä–∞, –ø–∏—à—É –≤ –õ–° –∏ —Å—Ç–µ–π—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
      setIsLoggedIn(true); // –û–±–Ω–æ–≤–ª—è—é —Å—Ç–µ–π—Ç –≤—Ö–æ–¥–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —é–∑–µ—Ä–∞
      await getAndSaveLikedMovies(); // –ü–æ–ª—É—á–∞—é –ª–∞–π–∫–Ω—É—Ç—ã–µ —Ñ–∏–ª—å–º—ã –∏ –ø–∏—à—É –∏—Ö –≤ –õ–°
      navigate('/movies', { replace: false }); // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—é —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —à–∞–≥–æ–≤
    } catch (error) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—å –≤—Ö–æ–¥: ', error);
      setApiError((error.message));
    }
  };

  const handleRegister = async () => {
    // –Ω–µ—Ç –∏–≤–µ–Ω—Ç–∞ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö –∏ preventDefault —Ç–∫ —Ñ—É–Ω–∫—Ü–∏—é –≤—ã–∑—ã–≤–∞—é –≤ –¥–æ—á–∫–µ –≤ –µ–µ —Ö—ç–Ω–¥–ª–µ—Ä–µ —Å–∞–±–º–∏—Ç–∞
    try {
      // –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å —é–∑–µ—Ä–∞. –ï—Å–ª–∏ –≤—ã–∑–æ–≤–µ—Ç –æ—à–∏–±–∫—É - cbLogin –Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è.
      await createUserApi(currentUser);
    } catch (error) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è: ', error);
      setApiError(error.message);
      return; // !!! –í–∞–∂–Ω–æ! –î–æ—Å—Ä–æ—á–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏, –µ—Å–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —é–∑–µ—Ä–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å.
    }
    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Ö–æ–¥–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
    await handleLogin(currentUser); // –¢–∫ –≤ cbLogin —Ñ—É–Ω–∫—Ü–∏–∏ —Å —Ç—Ä–∞–π–∫–µ—Ç—á–∞–º–∏, —Ç—É—Ç try-catch –Ω–µ –Ω—É–∂–µ–Ω.
  };

  const handleMenuClick = () => { setIsMenuPopupOpen(true); };

  // // // // // //
  //   –≠–§–§–ï–ö–¢–´   //
  // // // // // //

  useEffect(() => {
    setIsLoggedIn(JSON.parse(localStorage.getItem(LS_KEYS.isLoggedIn)));
  }, []);

  // –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä—è—é —Ç–æ–∫–µ–Ω. –ï—Å–ª–∏ –Ω–µ –≤–∞–ª–∏–¥–Ω—ã–π - –≤—ã—Ö–æ–∂—É. –°—Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ.
  useEffect(() => {
    // –∑–∞–ø—Ä–∞—à–∏–≤–∞—é –¥–∞–Ω–Ω—ã–µ —é–∑–µ—Ä–∞ —á—Ç–æ–±—ã –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ –õ–° –≤ –ê–ü–ò—à–∫–µ
    getUserApi().catch((error) => {
      if (error.status === 401) {
        // –í–º–µ—Å—Ç–æ handleLogOut, –∫–∞–∫ –≤ –∫–Ω–æ–ø–∫–µ –í–´–ô–¢–ò, —Ç—É—Ç —Ç–µ –∂–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –Ω–æ –±–µ–∑ –Ω–∞–≤–∏–≥–µ–π—Ç–∞.
        // –ß—Ç–æ–± –Ω–µ –∫–∏–¥–∞–ª–æ –Ω–∞ –≥–ª–∞–≤–Ω—É—é –ø—Ä–∏ –ø—Ä—è–º–æ–º –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –õ–û–ì–ò–ù.
        setIsLoggedIn(false);
        setCurrentUser({});
        localStorage.clear();
      }
    });
  }, []);

  return (
    <CurrentUserContext.Provider value={currentUserState}>
      <LogOutFunctionContext.Provider value={handleLogOut}>

        <Header
          urlWithHeader={urlWithHeader}
          isLoggedIn={isLoggedIn}
          onMenuClick={handleMenuClick}
        />

        <Routes>
          <Route path="/" element={<Main />} />

          {/* üü¢ MOVIES */}
          <Route
            path="/movies"
            element={(
              <ProtectedRouteElement
                element={Movies}
                allowedToSee={isLoggedIn}
              />
            )}
          />

          {/* üü¢ SAVED MOVIES */}
          <Route
            path="/saved-movies"
            element={(
              <ProtectedRouteElement
                element={SavedMovies}
                allowedToSee={isLoggedIn}
              />
            )}
          />

          {/* üü¢ PROFILE */}
          <Route
            path="/profile"
            element={(
              <ProtectedRouteElement
                element={Profile}
                onLogOut={handleLogOut}
                allowedToSee={isLoggedIn}
              />
            )}
          />

          {/* üü¢ LOGIN */}
          <Route
            path="/signin"
            element={(
              <ProtectedRouteElement
                element={Login}
                onSubmit={handleLogin}
                apiError={apiError}
                onResetApiError={resetApiError}
                allowedToSee={!isLoggedIn}
                redirectTo="/movies"
              />
            )}
          />

          {/* üü¢ REGISTER */}
          <Route
            path="/signup"
            element={(
              <ProtectedRouteElement
                element={Register}
                setCurrentUser={setCurrentUser}
                onSubmit={handleRegister}
                apiError={apiError}
                onResetApiError={resetApiError}
                allowedToSee={!isLoggedIn}
                redirectTo="/movies"
              />
            )}
          />
          {/* üü¢ 404 */}
          <Route path="/*" element={<NotFound />} />

        </Routes>

        <Footer urlWithFooter={urlWithFooter} />

        <MenuPopup onClose={cbCloseMenuPopup} isMenuPopupOpen={isMenuPopupOpen} />
      </LogOutFunctionContext.Provider>
    </CurrentUserContext.Provider>
  );
}

export default App;
