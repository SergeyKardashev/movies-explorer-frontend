import React, { useEffect, useState } from 'react';
import { Route, Routes, useNavigate } from 'react-router-dom';
import './App.css';
import Main from '../Main/Main';
import Login from '../Login/Login';
import Register from '../Register/Register';
import Profile from '../Profile/Profile';
import Header from '../Header/Header';
import MenuPopup from '../MenuPopup/MenuPopup';
import NotFound from '../NotFound/NotFound';
import Footer from '../Footer/Footer';
import Movies from '../Movies/Movies';
import SavedMovies from '../SavedMovies/SavedMovies';
import { createUser, updateUser, login } from '../../utils/MainApi';
import { useLocalStorageState as useStorage } from '../../utils/hooks';

function App() {
  const navigate = useNavigate();

  const [isMenuPopupOpen, setIsMenuPopupOpen] = useState(false);

  // —Å—Ç–µ–π—Ç—ã —á–µ—Ä–µ–∑ –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Ö—É–∫–∏:
  const [isLoggedIn, setIsLoggedIn] = useStorage('isLoggedIn', false);

  // –õ–∏—à–Ω–µ–µ –ø–æ–ª–µ userWord: 'HELLO'
  // eslint-disable-next-line object-curly-newline
  const [user, setUser] = useStorage('user', { userName: '', userEmail: '', userPassword: '', userWord: 'HELLO' });

  // initialUser –æ—Ç–¥–∞—é –≤ –ø—Ä–æ–ø—Å—ã –ü–†–û–§–ò–õ–Ø —á—Ç–æ–±—ã –Ω–µ –ø—É—Ç–∞—Ç—å —Å–æ —Å—Ç–µ–π—Ç–æ–º —é–∑–µ—Ä–∞
  // –∏ —á—Ç–æ–± —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è cbUpdateUser –Ω–µ –º–µ–Ω—è–ª–∏—Å—å –ø—Ä–∏ —Ä–µ—Ä–µ–Ω–¥–µ—Ä–µ –æ—Ç –∏–Ω–ø—É—Ç–∞
  const initialUser = JSON.parse(localStorage.getItem('user') || '{}');

  const urlWithHeader = ['/', '/movies', '/saved-movies', '/profile'];
  const urlWithFooter = ['/', '/movies', '/saved-movies'];

  const cbCloseMenuPopup = () => { setIsMenuPopupOpen(false); };

  useEffect(
    () => { setIsLoggedIn(JSON.parse(localStorage.getItem('isLoggedIn'))); },
    [],
  );

  useEffect(
    () => { console.log('–Æ–∑–µ—Ä –≤ App.jsx –≤—ã–≤–µ–¥–µ–Ω —é–∑ —ç—Ñ—Ñ–µ–∫—Ç–æ–º', user); },
    [user],
  );
  const cbRegister = async (e) => {
    e.preventDefault();
    try {
      // const fetchedUser = await createUser(user)
      await createUser(user)
        .then((res) => {
          console.log('–ó–∞—Ä–µ–≥–∞–ª, response from register ', res);
          setUser({
            userEmail: res.email,
            userName: res.name,
            userId: res._id,
          });
        })
        .then(() => console.log('–£—Å—Ç–∞–Ω–æ–≤–∏–ª —é–∑–µ—Ä–∞ –≤ THEN–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –°—Ç–µ–π—Ç User:', user));

      // üî¥ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–µ–π—Ç–∞ –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–æ–≤—Ä–µ–º—è. (–≤—ã–∑—ã–≤–∞–ª –ø–æ—Å–ª–µ —Ñ–µ—Ç—á–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)
      // –í –∞–ø–∏—à–∫—É –õ–û–ì–ò–ù —É—Ö–æ–¥—è—Ç —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –∞–π–¥–∏—à–∫–∏
      // await setUser({
      //   userEmail: fetchedUser.email,
      //   userName: fetchedUser.name,
      //   userId: fetchedUser._id,
      // });
      // console.log('–æ–±–Ω–æ–≤–∏–ª —Å—Ç–µ–π—Ç –ø–æ—Å–ª–µ –∑–∞—Ä–µ–≥–∏–≤–∞–Ω–∏—è. –ú–æ–∂–µ—Ç –æ–Ω –µ—â–µ –Ω–µ –æ–±–Ω–æ–≤–∏–ª—Å—è. ');

      // üî¥ –û—Ç–∫—É–¥–∞ –±–µ—Ä–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å –≤ —Å—Ç–µ–π—Ç–µ —é–∑–µ—Ä–∞ –µ—Å–ª–∏ —è —É—Å—Ç–∞–Ω–æ–≤–∏–ª –ù–û–í–û–ï –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–µ–π—Ç–∞,
      // –∑–∞—Ç–µ—Ä–µ–≤ —Å—Ç–∞—Ä–æ–µ, –∞ –Ω–µ –¥–æ–ø–æ–ª–Ω–∏–≤ —Å—Ç–∞—Ä–æ–µ –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏.
      // –ó–Ω–∞—á–∏—Ç, –±–µ—Ä–µ—Ç—Å—è —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –∏–∑ –∏–Ω–ø—É—Ç–æ–≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –∞ –Ω–µ –∏–∑ response
      console.log('–ù–∞—á–∏–Ω–∞—é –≤—Ö–æ–¥');
      await login(user); // –≤—Ö–æ–∂—É, –∑–∞–ø–∏—Å—ã–≤–∞—è —Ç–æ–∫–µ–Ω –≤ –õ–ú
      console.log('–í–æ—à–µ–ª');
      setIsLoggedIn(true);
      navigate('/movies', { replace: false });
    } catch (error) {
      console.log(error); // üî¥ –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ù–ï –æ–∫, –ù–ï –∏–¥—É –Ω–∞ –≥–ª–∞–≤–Ω—É—é, –æ—à–∏–±–∫–∞ –Ω–∞–¥ –∫–Ω–æ–ø–∫–æ–π.
    }
  };

  const cbLogin = async (loginData) => {
    try {
      // —á–∏—â—É –õ–° –∏ —Å—Ç–µ–π—Ç –Ω–∞ —Å–ª—É—á–∞–π –æ—Å—Ç–∞—Ç–∫–æ–≤ –∏–Ω—Ñ—ã –æ—Ç –¥—Ä—É–≥–æ–≥–æ —é–∑–µ—Ä–∞
      localStorage.clear();
      setUser({ userName: '', userEmail: '', userPassword: '' });
      await login(loginData);
      setUser(() => ({ userEmail: loginData.userEmail, userPassword: loginData.userPassword }));
      setIsLoggedIn(true);
      navigate('/movies', { replace: false });
    } catch (error) {
      console.log(error); // üî¥ –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ù–ï –æ–∫, –ù–ï –∏–¥—É –Ω–∞ –≥–ª–∞–≤–Ω—É—é, –æ—à–∏–±–∫–∞ –Ω–∞–¥ –∫–Ω–æ–ø–∫–æ–π.
    }
  };

  const handleMenuClick = () => { setIsMenuPopupOpen(true); };

  const cbLogOut = () => {
    setIsLoggedIn(false);
    localStorage.clear();
    setUser({ userName: '', userEmail: '', userPassword: '' });
    navigate('/', { replace: false });
  };

  const cbUpdateUser = async (userData) => {
    // –æ—Ç–ø—Ä–∞–≤–ª—è—é –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —é–∑–µ—Ä–∞ –≤ –ê–ü–ò
    try {
      const response = await updateUser(userData);
      const userToSetState = {
        userEmail: response.email,
        userName: response.name,
        userId: user._id,
      };
      // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –û–ö - –æ–±–Ω–æ–≤–ª—è—é —Å—Ç–µ–π—Ç —é–∑–µ—Ä–∞ (–∞–≤—Ç–æ–º–∞—Ç–æ–º –∏ –õ–°), –∏–¥—É –Ω–∞ –≥–ª–∞–≤–Ω—É—é.
      setUser(userToSetState);
      navigate('/', { replace: true });
    } catch (error) {
      // üî¥ –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ù–ï –æ–∫, –ù–ï –∏–¥—É –Ω–∞ –≥–ª–∞–≤–Ω—É—é, –æ—à–∏–±–∫–∞ –Ω–∞–¥ –∫–Ω–æ–ø–∫–æ–π.
      console.log(error);
    }
  };

  return (
    <>
      <Header
        urlWithHeader={urlWithHeader}
        isLoggedIn={isLoggedIn}
        onMenuClick={handleMenuClick}
      />

      <Routes>
        <Route path="/" element={<Main />} />
        <Route path="/movies" element={<Movies />} />
        <Route path="/saved-movies" element={<SavedMovies />} />
        <Route
          path="/signin"
          element={<Login onSubmit={cbLogin} />}
        />
        <Route
          path="/signup"
          element={(
            <Register
              user={user}
              setUser={setUser}
              onSubmit={cbRegister}
            />
          )}
        />
        <Route
          path="/profile"
          element={(
            <Profile
              onSubmit={cbUpdateUser}
              onLogOut={cbLogOut}
              // user={user}
              // setUser={setUser}
              initialUser={initialUser}
            />
          )}
        />
        <Route path="/*" element={<NotFound />} />
      </Routes>

      <Footer urlWithFooter={urlWithFooter} />

      <MenuPopup
        onClose={cbCloseMenuPopup}
        isMenuPopupOpen={isMenuPopupOpen}
      />
    </>
  );
}

export default App;
