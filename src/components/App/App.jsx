import React, { useEffect, useState } from 'react'; // useRef
import { Route, Routes, useNavigate } from 'react-router-dom';
import {
  createUserApi, getTokenApi, getUserApi, getMoviesApi,
} from '../../utils/MainApi'; // updateUserApi,
import './App.css';
import Main from '../Main/Main';
import Login from '../Login/Login';
import Register from '../Register/Register';
import Profile from '../Profile/Profile';
import Header from '../Header/Header';
import MenuPopup from '../MenuPopup/MenuPopup';
import NotFound from '../NotFound/NotFound';
import Footer from '../Footer/Footer';
import Movies from '../Movies/Movies';
import SavedMovies from '../SavedMovies/SavedMovies';
import useStorage from '../../utils/hooks';
import LS_KEYS from '../../constants/localStorageKeys';
import { setToken } from '../../utils/token'; // getToken, // removeToken,
import CurrentUserContext from '../../contexts/CurrentUserContext';
import processUser from '../../utils/processUser';
import ProtectedRouteElement from '../ProtectedRoute/ProtectedRoute';

function App() {
  const navigate = useNavigate();

  // // // // //
  //  ะกะขะะะขะซ  //
  // // // // //

  const [isMenuPopupOpen, setIsMenuPopupOpen] = useState(false); // ะัะบัััะพ ะปะธ ะณะฐะผะฑััะณะตั-ะผะตะฝั
  const [apiError, setApiError] = useState(''); // ะขะตะบัั ะพัะธะฑะบะธ ะพั ะฐะฟะธ ะฝะฐะด ะบะฝะพะฟะบะพะน ะฒ ัะพัะผะฐั ัะทะตัะฐ

  // ะกัะตะนัั ัะตัะตะท ะบะฐััะพะผะฝัะน ััะบ useStorage, ะดัะฑะปะธััััะธะน ัะพััะฐะฝะตะฝะธะต ะฒ ััะตะนั ะธ ะฒ ะปะพะบะฐะปัะฝะพะต ััะฐะฝะธะปะธัะต:
  const [isLoggedIn, setIsLoggedIn] = useStorage('isLoggedIn', false);

  // ะกะฟะตัะธะฐะปัะฝะพ ัะดะตะปะฐะป ะฒ 2 ัััะพะบะธ (ะดะตััะฐะณะผะตะฝัะฐัะธั ะฒัะพัะพะน ัััะพะบะพะน)
  // ััะพะฑั ะฟะตัะตะดะฐัั ะฒ ะบะพะฝัะตะบัั ะพะดะฝะพ ะทะฝะฐัะตะฝะธะต, ะฐ ะฝะต ะผะฐััะธะฒ. ะะฝะฐัะต ะปะธะฝัะตั ััะณะฐะตััั.
  const currentUserState = useStorage('user', {});
  const [currentUser, setCurrentUser] = currentUserState;

  const urlWithHeader = ['/', '/movies', '/saved-movies', '/profile'];
  const urlWithFooter = ['/', '/movies', '/saved-movies'];

  // // // // // //
  //   ะคะฃะะะฆะะ   //
  // // // // // //

  const cbCloseMenuPopup = () => {
    setIsMenuPopupOpen(false);
  };

  const resetApiError = () => {
    setApiError('');
  };

  const getAndSaveToken = async (loginData) => {
    // ะัะฟะพะปะฝัั ะฒัะพะด ะธ ะฟะพะปััะฐั ัะพะบะตะฝ, ัะพััะฐะฝัั ัะพะบะตะฝ ะฒ ะะก ะธ ััะตะนั
    try {
      const loginResponse = await getTokenApi(loginData);
      setToken(loginResponse.token);
    } catch (error) {
      setApiError((error.message));
      throw error; // ะัะพะฑัะพั ะพัะธะฑะบะธ ะฝะฐะฒะตัั ะดะปั ะพะฑัะฐะฑะพัะบะธ ะฒ handleLogin
    }
  };

  const getAndSetUser = async () => {
    // ะะพะปััะฐั ะดะฐะฝะฝัะต ัะทะตัะฐ, ะฟะธัั ะฒ ะะก ะธ ััะตะนั
    try {
      const rawUser = await getUserApi();
      setCurrentUser(processUser(rawUser));
    } catch (error) {
      setApiError((error.message));
      throw error; // ะัะพะฑัะพั ะพัะธะฑะบะธ ะฝะฐะฒะตัั ะดะปั ะพะฑัะฐะฑะพัะบะธ ะฒ handleLogin
    }
  };

  const getAndSaveLikedMovies = async () => {
    // ะะพะปััะฐั ะปะฐะนะบะฝัััะต ัะธะปัะผั ะธ ะฟะธัั ะฒ ะะก
    try {
      const movies = await getMoviesApi();
      localStorage.setItem(LS_KEYS.likedMovies, JSON.stringify(movies));
    } catch (error) {
      setApiError((error.message));
      throw error; // ะัะพะฑัะพั ะพัะธะฑะบะธ ะฝะฐะฒะตัั ะดะปั ะพะฑัะฐะฑะพัะบะธ ะฒ handleLogin
    }
  };

  const handleLogin = async (loginData) => {
    try {
      await getAndSaveToken(loginData); // ะะพะปััะฐั ัะพะบะตะฝ
      await getAndSetUser(); // ะะพะปััะฐั ัะทะตัะฐ, ะฟะธัั ะฒ ะะก ะธ ััะตะนั ัะพะปัะบะพ ะฟะพัะปะต ะฟะพะปััะตะฝะธั ัะพะบะตะฝะฐ
      setIsLoggedIn(true); // ะะฑะฝะพะฒะปัั ััะตะนั ะฒัะพะดะฐ ัะพะปัะบะพ ะฟะพัะปะต ะฟะพะปััะตะฝะธั ะดะฐะฝะฝัั ัะทะตัะฐ
      await getAndSaveLikedMovies(); // ะะพะปััะฐั ะปะฐะนะบะฝัััะต ัะธะปัะผั ะธ ะฟะธัั ะธั ะฒ ะะก
      navigate('/movies', { replace: false }); // ะะตัะตะฝะฐะฟัะฐะฒะปัั ัะพะปัะบะพ ะฟะพัะปะต ััะฟะตัะฝะพะณะพ ะฒัะฟะพะปะฝะตะฝะธั ะฒัะตั ะฟัะตะดัะดััะธั ัะฐะณะพะฒ
    } catch (error) {
      console.error('ะะต ัะดะฐะปะพัั ะพัััะตััะฒะธัั ะฒัะพะด: ', error);
      setApiError((error.message));
    }
  };

  const handleRegister = async (e) => {
    e.preventDefault();
    try {
      // ะะพะฟััะบะฐ ัะพะทะดะฐัั ัะทะตัะฐ. ะัะปะธ ะฒัะทะพะฒะตั ะพัะธะฑะบั - cbLogin ะฝะต ะฒัะฟะพะปะฝะธััั.
      await createUserApi(currentUser);
    } catch (error) {
      console.error('ะะต ัะดะฐะปะพัั ะทะฐัะตะณะธัััะธัะพะฒะฐัััั: ', error);
      setApiError(error.message);
      return; // !!! ะะฐะถะฝะพ! ะะพััะพัะฝัะน ะฒััะพะด ะธะท ััะฝะบัะธะธ, ะตัะปะธ ัะพะทะดะฐะฝะธะต ัะทะตัะฐ ะฝะต ัะดะฐะปะพัั.
    }
    // ะัะฟะพะปะฝะตะฝะธะต ะฒัะพะดะฐ ัะพะปัะบะพ ะฟะพัะปะต ััะฟะตัะฝะพะน ัะตะณะธัััะฐัะธะธ.
    await handleLogin(currentUser);
    // ะข.ะบ. ะฒ cbLogin ะฒัะต ััะฝะบัะธะธ ัะพ ัะฒะพะธะผะธ try-catch - ะทะดะตัั try-catch ะฝะต ะฝัะถะตะฝ.
  };

  const handleMenuClick = () => { setIsMenuPopupOpen(true); };

  const handleLogOut = () => {
    setIsLoggedIn(false);
    setCurrentUser({});
    localStorage.clear();
    navigate('/', { replace: false });
  };

  // // // // // //
  //   ะญะคะคะะะขะซ   //
  // // // // // //

  useEffect(() => {
    setIsLoggedIn(JSON.parse(localStorage.getItem(LS_KEYS.isLoggedIn)));
  }, []);

  // ะฟัะธ ะผะพะฝัะธัะพะฒะฐะฝะธะธ ะฟัะพะฒะตััั ัะพะบะตะฝ. ะัะปะธ ะฝะต ะฒะฐะปะธะดะฝัะน - ะฒััะพะถั. ะกัะฐะฑะพัะฐะตั ะฟัะธ ะฟะตัะตะทะฐะณััะทะบะต.
  useEffect(() => {
    // ะทะฐะฟัะฐัะธะฒะฐั ะดะฐะฝะฝัะต ัะทะตัะฐ ััะพะฑั ะฒะฐะปะธะดะธัะพะฒะฐัั ัะพะบะตะฝ. ะคัะฝะบัะธั ะฑะตัะตั ัะพะบะตะฝ ะธะท ะะก ะธ ัะปัั ะฒ ะะะ
    getUserApi().catch((error) => {
      if (error.status === 401) {
        handleLogOut(); // ัะพะบะตะฝ ะฝะต ะฒะฐะปะธะดะฝัะน ะธะปะธ ะพััััััะฒัะตั. ะััะพะถั ะธ ะธะดั ะฝะฐ ะณะปะฐะฒะฝัั
      }
    });
  }, []);

  return (
    <CurrentUserContext.Provider value={currentUserState}>
      <Header urlWithHeader={urlWithHeader} isLoggedIn={isLoggedIn} onMenuClick={handleMenuClick} />

      <Routes>
        <Route path="/" element={<Main />} />

        {/* ๐ข MOVIES */}
        <Route
          path="/movies"
          element={(
            <ProtectedRouteElement
              element={Movies}
              allowedToSee={isLoggedIn}
            />
          )}
        />

        {/* ๐ข SAVED MOVIES */}
        <Route
          path="/saved-movies"
          element={(
            <ProtectedRouteElement
              element={SavedMovies}
              allowedToSee={isLoggedIn}
            />
          )}
        />

        {/* ๐ข PROFILE */}
        <Route
          path="/profile"
          element={(
            <ProtectedRouteElement
              element={Profile}
              onLogOut={handleLogOut}
              allowedToSee={isLoggedIn}
            />
          )}
        />

        {/* ๐ข LOGIN */}
        <Route
          path="/signin"
          element={(
            <ProtectedRouteElement
              element={Login}
              onSubmit={handleLogin}
              apiError={apiError}
              onResetApiError={resetApiError}
              allowedToSee={!isLoggedIn}
              redirectTo="/movies"
            />
          )}
        />

        {/* ๐ข REGISTER */}
        <Route
          path="/signup"
          element={(
            <ProtectedRouteElement
              element={Register}
              setCurrentUser={setCurrentUser}
              onSubmit={handleRegister}
              apiError={apiError}
              onResetApiError={resetApiError}
              allowedToSee={!isLoggedIn}
              redirectTo="/movies"
            />
          )}
        />
        {/* ๐ข 404 */}
        <Route path="/*" element={<NotFound />} />

      </Routes>

      <Footer urlWithFooter={urlWithFooter} />

      <MenuPopup onClose={cbCloseMenuPopup} isMenuPopupOpen={isMenuPopupOpen} />
    </CurrentUserContext.Provider>
  );
}

export default App;
