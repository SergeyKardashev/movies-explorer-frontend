import mainApiUrl from '../constants/mainApiUrl';
import {
  getToken,
  setToken,
  // removeToken,
} from './token';
import THUMB_BASE_URL from '../constants/thumbBaseUrl';

// üü°üü°üü°üü° –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–º–µ–Ω–∏–ª —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ –µ–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤–æ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö
// const checkResponse = (res) => {
//   if (!res.ok) return Promise.reject(new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –≥–ª–∞–≤–Ω–æ–º—É –ê–ü–ò: ${res.status}`));
//   return res.json();
// };
// üü° –º–æ–∂–µ—Ç –Ω–µ –Ω—É–∂–µ–Ω new Error (–∏–Ω—Å—Ç–∞–Ω—Å –∫–ª–∞—Å—Å–∞)? –ú–æ–∂–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–æ—Å—Ç–æ (Error())

export const createUser = (userData) => {
  // console.log('–≤ –ê–ü–ò –≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –≤—Ö–æ–¥–µ:', userData);
  const { userEmail, userName, userPassword } = userData;
  return fetch(`${mainApiUrl}/signup`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      email: userEmail,
      name: userName,
      password: userPassword,
    }),
  })
    // üü° –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–º–µ–Ω–∏–ª —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ –µ–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤–æ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö
    // .then(checkResponse);
    .then((res) => {
      if (!res.ok) return Promise.reject(new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ login –∫ –ê–ü–ò: ${res.status}`));
      return res.json();
    });
};

export const login = (userData) => {
  // console.log('–≤ –ê–ü–ò –≤ —Ñ—É–Ω–∫—Ü–∏–∏ login –Ω–∞ –≤—Ö–æ–¥–µ:', userData);
  const { userPassword: password, userEmail: email } = userData;
  return fetch(`${mainApiUrl}/signin`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ password, email }),
  })
    // üü° –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–º–µ–Ω–∏–ª —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ –µ–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤–æ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö
    // .then(checkResponse)
    .then((res) => {
      if (!res.ok) return Promise.reject(new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ login –∫ –ê–ü–ò: ${res.status}`));
      return res.json();
    })
    .then((data) => {
      if (!data.token) console.log('NO token in response from authorize');
      setToken(data.token);
      return data;
    });
};

export const updateUser = (userData) => {
  const jwt = getToken();
  return fetch(`${mainApiUrl}/users/me`, {
    method: 'PATCH',
    headers: {
      'Content-Type': 'application/json',
      Authorization: `Bearer ${jwt}`,
    },
    body: JSON.stringify({
      email: userData.userEmail,
      name: userData.userName,
    }),
  })
    // üü° –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–º–µ–Ω–∏–ª —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ –µ–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤–æ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö
    // .then(checkResponse);
    .then((res) => {
      if (!res.ok) return Promise.reject(new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ updateUser –∫ –ê–ü–ò: ${res.status}`));
      return res.json();
    });
};

// /users/me get - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç email –∏ –∏–º—è
export const getUser = () => {
  console.log('–í –∞–ø–∏—à–∫–µ —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª–∞ getUser.');
  const jwt = getToken();
  return fetch(`${mainApiUrl}/users/me`, {
    method: 'GET',
    headers: {
      'Content-Type': 'application/json',
      Authorization: `Bearer ${jwt}`,
    },
  })
    // üü° –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–º–µ–Ω–∏–ª —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ –µ–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤–æ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö
    // .then(checkResponse);
    .then((res) => {
      console.log('–í –∞–ø–∏—à–∫–µ –ø—Ä–∏—à–µ–ª –æ—Ç–≤–µ—Ç –æ—Ç getUser.');
      if (!res.ok) {
        console.log('üî¥ –í –æ—Ç–≤–µ—Ç–µ –æ—Ç getUser –ª–∞–∂–∞.');
        return Promise.reject(new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ getUser –∫ –ê–ü–ò: ${res.status}`));
      }
      return res.json();
    });
};

export const getMovies = () => {
  const jwt = getToken();
  console.log('–í –∞–ø–∏—à–∫–µ —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª–∞ getMovies.');
  return fetch(`${mainApiUrl}/movies`, {
    // method: 'GET',
    headers: {
      'Content-Type': 'application/json',
      Authorization: `Bearer ${jwt}`,
    },
  })
    // üü° –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–º–µ–Ω–∏–ª —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ –µ–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤–æ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö
    // .then(checkResponse)
    .then((res) => {
      console.log('–í getMovies –ø—Ä–∏—à–µ–ª –æ—Ç–≤–µ—Ç');
      if (!res.ok) {
        console.log('üî¥ –í –æ—Ç–≤–µ—Ç–µ –ª–∞–∂–∞ —Å–ª—É—á–∏–ª–∞—Å—å. –°—Ç–∞—Ç—É—Å –ù–ï –æ–∫');
        return Promise.reject(new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ getMovies –∫ –ê–ü–ò: ${res.status}`));
      }
      return res.json();
    })
    .then((res) => { console.log('–í getMovies –ø–æ–ª—É—á–∏–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω–∫–∏', res); });
};

export const saveMovie = (movie) => {
  console.log('in main api movie is', movie);
  // —Å–æ–∑–¥–∞—ë—Ç —Ñ–∏–ª—å–º —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –≤ —Ç–µ–ª–µ country, director, duration, year, description, image,
  // trailer, nameRU, nameEN, thumbnail, movieId

  // –í —á—É–∂–æ–π –ê–ü–ò trailerLink, –∞ –≤ –º–æ–µ–π - trailer.
  // –í —á—É–∂–æ–π –Ω–µ—Ç thumbnail, –∞ –≤ –º–æ–µ–π –µ—Å—Ç—å. –í–∑—è–ª –∏–∑ movie.image.thumbnail.url
  // Owner –Ω–µ –ø–µ—Ä–µ–¥–∞—é —Å —Ñ—Ä–æ–Ω—Ç–∞, —Ç.–∫. –æ–Ω —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–∞ –±—ç–∫–µ –∏–∑ —Ç–æ–∫–µ–Ω–∞ –º–∏–¥–ª–≤—ç—Ä–æ–º auth
  // –∏ –ø–∏—à–µ—Ç—Å—è –≤ –ë–î owner: req.user._id,
  // –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∏–ª—å–º–∞ –∏–∑–º–µ–Ω–∏–ª –∫–∞—Ä—Ç–∫–∏–Ω–æ—á–Ω—ã–π —É—Ä–ª –Ω–∞ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π
  const {
    country, director, duration, year, description, image, trailerLink, nameRU, nameEN, id,
  } = movie;

  const imageAbsoluteUrl = `${THUMB_BASE_URL}${image.url}`;
  const thumbnailAbsoluteUrl = `${THUMB_BASE_URL}${image.formats.thumbnail.url}`;

  const movieToSend = {
    country,
    director,
    duration: String(duration),
    year,
    description,
    // image: image.url,
    image: imageAbsoluteUrl,
    trailer: trailerLink,
    nameRU,
    nameEN,
    thumbnail: thumbnailAbsoluteUrl,
    // thumbnail: image.formats.thumbnail.url,
    movieId: id,
  };
  const jwt = getToken();
  return fetch(`${mainApiUrl}/movies`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      Authorization: `Bearer ${jwt}`,
    },
    body: JSON.stringify(movieToSend),
  })
    // üü° –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–º–µ–Ω–∏–ª —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ –µ–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤–æ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö
    // .then(checkResponse)
    .then((res) => {
      if (!res.ok) return Promise.reject(new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ getMovies –∫ –ê–ü–ò: ${res.status}`));
      return res.json();
    })
    .then((res) => { console.log('–ø–æ–ª—É—á–∏–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω–∫–∏', res); });
};

// /movies/:_id ‚ÄòDELETE‚Äô - —É–¥–∞–ª—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Ñ–∏–ª—å–º –ø–æ id
// –ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∏—á–µ–≥–æ, –∫—Ä–æ–º–µ –∞–π–¥–∏—à–∫–∏ –≤ –ü–ê–†–ê–ú–ï–¢–†–ê–• –∏ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –õ–°
// –ò–∑ –±—ç–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç —Å –æ–¥–Ω–∏–º —Å–≤–æ–π—Å—Ç–≤–æ–º { _id: }
export const deleteMovie = (movie) => {
  const jwt = getToken();
  console.log('—Ñ–∏–ª—å–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ', movie);
  return fetch(`${mainApiUrl}/movies/:${movie.id}`, {
    method: 'DELETE',
    headers: {
      'Content-Type': 'application/json',
      Authorization: `Bearer ${jwt}`,
    },
  })
    // üü° –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–º–µ–Ω–∏–ª —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ –µ–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤–æ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö
    // .then(checkResponse);
    .then((res) => {
      if (!res.ok) return Promise.reject(new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ deleteMovie –∫ –ê–ü–ò: ${res.status}`));
      return res.json();
    });
};
